// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hootsuite/atlantis/locking (interfaces: Backend)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/hootsuite/atlantis/models"
	reflect "reflect"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// GetLock mocks base method
func (m *MockBackend) GetLock(arg0 models.Project, arg1 string) (*models.ProjectLock, error) {
	ret := m.ctrl.Call(m, "GetLock", arg0, arg1)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLock indicates an expected call of GetLock
func (mr *MockBackendMockRecorder) GetLock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockBackend)(nil).GetLock), arg0, arg1)
}

// List mocks base method
func (m *MockBackend) List() ([]models.ProjectLock, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBackendMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackend)(nil).List))
}

// TryLock mocks base method
func (m *MockBackend) TryLock(arg0 models.ProjectLock) (bool, models.ProjectLock, error) {
	ret := m.ctrl.Call(m, "TryLock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.ProjectLock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TryLock indicates an expected call of TryLock
func (mr *MockBackendMockRecorder) TryLock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockBackend)(nil).TryLock), arg0)
}

// Unlock mocks base method
func (m *MockBackend) Unlock(arg0 models.Project, arg1 string) (*models.ProjectLock, error) {
	ret := m.ctrl.Call(m, "Unlock", arg0, arg1)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock
func (mr *MockBackendMockRecorder) Unlock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockBackend)(nil).Unlock), arg0, arg1)
}

// UnlockByPull mocks base method
func (m *MockBackend) UnlockByPull(arg0 string, arg1 int) ([]models.ProjectLock, error) {
	ret := m.ctrl.Call(m, "UnlockByPull", arg0, arg1)
	ret0, _ := ret[0].([]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockByPull indicates an expected call of UnlockByPull
func (mr *MockBackendMockRecorder) UnlockByPull(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockByPull", reflect.TypeOf((*MockBackend)(nil).UnlockByPull), arg0, arg1)
}
