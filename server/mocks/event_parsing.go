// Code generated by MockGen. DO NOT EDIT.
// Source: server/event_parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	models "github.com/hootsuite/atlantis/models"
	server "github.com/hootsuite/atlantis/server"
	reflect "reflect"
)

// MockEventParsing is a mock of EventParsing interface
type MockEventParsing struct {
	ctrl     *gomock.Controller
	recorder *MockEventParsingMockRecorder
}

// MockEventParsingMockRecorder is the mock recorder for MockEventParsing
type MockEventParsingMockRecorder struct {
	mock *MockEventParsing
}

// NewMockEventParsing creates a new mock instance
func NewMockEventParsing(ctrl *gomock.Controller) *MockEventParsing {
	mock := &MockEventParsing{ctrl: ctrl}
	mock.recorder = &MockEventParsingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventParsing) EXPECT() *MockEventParsingMockRecorder {
	return m.recorder
}

// DetermineCommand mocks base method
func (m *MockEventParsing) DetermineCommand(comment *github.IssueCommentEvent) (*server.Command, error) {
	ret := m.ctrl.Call(m, "DetermineCommand", comment)
	ret0, _ := ret[0].(*server.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineCommand indicates an expected call of DetermineCommand
func (mr *MockEventParsingMockRecorder) DetermineCommand(comment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineCommand", reflect.TypeOf((*MockEventParsing)(nil).DetermineCommand), comment)
}

// ExtractCommentData mocks base method
func (m *MockEventParsing) ExtractCommentData(comment *github.IssueCommentEvent, ctx *server.CommandContext) error {
	ret := m.ctrl.Call(m, "ExtractCommentData", comment, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractCommentData indicates an expected call of ExtractCommentData
func (mr *MockEventParsingMockRecorder) ExtractCommentData(comment, ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractCommentData", reflect.TypeOf((*MockEventParsing)(nil).ExtractCommentData), comment, ctx)
}

// ExtractPullData mocks base method
func (m *MockEventParsing) ExtractPullData(pull *github.PullRequest) (models.PullRequest, models.Repo, error) {
	ret := m.ctrl.Call(m, "ExtractPullData", pull)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtractPullData indicates an expected call of ExtractPullData
func (mr *MockEventParsingMockRecorder) ExtractPullData(pull interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractPullData", reflect.TypeOf((*MockEventParsing)(nil).ExtractPullData), pull)
}

// ExtractRepoData mocks base method
func (m *MockEventParsing) ExtractRepoData(ghRepo *github.Repository) (models.Repo, error) {
	ret := m.ctrl.Call(m, "ExtractRepoData", ghRepo)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractRepoData indicates an expected call of ExtractRepoData
func (mr *MockEventParsingMockRecorder) ExtractRepoData(ghRepo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRepoData", reflect.TypeOf((*MockEventParsing)(nil).ExtractRepoData), ghRepo)
}
