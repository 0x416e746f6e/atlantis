// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/hootsuite/atlantis/server (interfaces: Workspace)

package mocks

import (
	models "github.com/hootsuite/atlantis/models"
	server "github.com/hootsuite/atlantis/server"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockWorkspace struct {
	fail func(message string, callerSkip ...int)
}

func NewMockWorkspace() *MockWorkspace {
	return &MockWorkspace{fail: pegomock.GlobalFailHandler}
}

func (mock *MockWorkspace) Clone(ctx *server.CommandContext) (string, error) {
	params := []pegomock.Param{ctx}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Clone", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockWorkspace) GetWorkspace(ctx *server.CommandContext) (string, error) {
	params := []pegomock.Param{ctx}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetWorkspace", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockWorkspace) Delete(repo models.Repo, pull models.PullRequest) error {
	params := []pegomock.Param{repo, pull}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Delete", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockWorkspace) VerifyWasCalledOnce() *VerifierWorkspace {
	return &VerifierWorkspace{mock, pegomock.Times(1), nil}
}

func (mock *MockWorkspace) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierWorkspace {
	return &VerifierWorkspace{mock, invocationCountMatcher, nil}
}

func (mock *MockWorkspace) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierWorkspace {
	return &VerifierWorkspace{mock, invocationCountMatcher, inOrderContext}
}

type VerifierWorkspace struct {
	mock                   *MockWorkspace
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierWorkspace) Clone(ctx *server.CommandContext) *Workspace_Clone_OngoingVerification {
	params := []pegomock.Param{ctx}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Clone", params)
	return &Workspace_Clone_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Workspace_Clone_OngoingVerification struct {
	mock              *MockWorkspace
	methodInvocations []pegomock.MethodInvocation
}

func (c *Workspace_Clone_OngoingVerification) GetCapturedArguments() *server.CommandContext {
	ctx := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1]
}

func (c *Workspace_Clone_OngoingVerification) GetAllCapturedArguments() (_param0 []*server.CommandContext) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*server.CommandContext, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*server.CommandContext)
		}
	}
	return
}

func (verifier *VerifierWorkspace) GetWorkspace(ctx *server.CommandContext) *Workspace_GetWorkspace_OngoingVerification {
	params := []pegomock.Param{ctx}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetWorkspace", params)
	return &Workspace_GetWorkspace_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Workspace_GetWorkspace_OngoingVerification struct {
	mock              *MockWorkspace
	methodInvocations []pegomock.MethodInvocation
}

func (c *Workspace_GetWorkspace_OngoingVerification) GetCapturedArguments() *server.CommandContext {
	ctx := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1]
}

func (c *Workspace_GetWorkspace_OngoingVerification) GetAllCapturedArguments() (_param0 []*server.CommandContext) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*server.CommandContext, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*server.CommandContext)
		}
	}
	return
}

func (verifier *VerifierWorkspace) Delete(repo models.Repo, pull models.PullRequest) *Workspace_Delete_OngoingVerification {
	params := []pegomock.Param{repo, pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Delete", params)
	return &Workspace_Delete_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Workspace_Delete_OngoingVerification struct {
	mock              *MockWorkspace
	methodInvocations []pegomock.MethodInvocation
}

func (c *Workspace_Delete_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest) {
	repo, pull := c.GetAllCapturedArguments()
	return repo[len(repo)-1], pull[len(pull)-1]
}

func (c *Workspace_Delete_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.Repo, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(models.Repo)
		}
		_param1 = make([]models.PullRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(models.PullRequest)
		}
	}
	return
}
