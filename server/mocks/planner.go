// Code generated by MockGen. DO NOT EDIT.
// Source: server/plan_executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	server "github.com/hootsuite/atlantis/server"
	reflect "reflect"
)

// MockPlanner is a mock of Planner interface
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockPlanner) Execute(ctx *server.CommandContext) {
	m.ctrl.Call(m, "Execute", ctx)
}

// Execute indicates an expected call of Execute
func (mr *MockPlannerMockRecorder) Execute(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPlanner)(nil).Execute), ctx)
}

// SetLockURL mocks base method
func (m *MockPlanner) SetLockURL(arg0 func(string) string) {
	m.ctrl.Call(m, "SetLockURL", arg0)
}

// SetLockURL indicates an expected call of SetLockURL
func (mr *MockPlannerMockRecorder) SetLockURL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLockURL", reflect.TypeOf((*MockPlanner)(nil).SetLockURL), arg0)
}
