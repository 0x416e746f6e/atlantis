// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommentParsing)

package mocks

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
	events "github.com/runatlantis/atlantis/server/events"
	vcs "github.com/runatlantis/atlantis/server/events/vcs"
)

type MockCommentParsing struct {
	fail func(message string, callerSkip ...int)
}

func NewMockCommentParsing() *MockCommentParsing {
	return &MockCommentParsing{fail: pegomock.GlobalFailHandler}
}

func (mock *MockCommentParsing) DetermineCommand(comment string, vcsHost vcs.Host) events.CommentParseResult {
	params := []pegomock.Param{comment, vcsHost}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DetermineCommand", params, []reflect.Type{reflect.TypeOf((*events.CommentParseResult)(nil)).Elem()})
	var ret0 events.CommentParseResult
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(events.CommentParseResult)
		}
	}
	return ret0
}

func (mock *MockCommentParsing) VerifyWasCalledOnce() *VerifierCommentParsing {
	return &VerifierCommentParsing{mock, pegomock.Times(1), nil}
}

func (mock *MockCommentParsing) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierCommentParsing {
	return &VerifierCommentParsing{mock, invocationCountMatcher, nil}
}

func (mock *MockCommentParsing) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierCommentParsing {
	return &VerifierCommentParsing{mock, invocationCountMatcher, inOrderContext}
}

type VerifierCommentParsing struct {
	mock                   *MockCommentParsing
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierCommentParsing) DetermineCommand(comment string, vcsHost vcs.Host) *CommentParsing_DetermineCommand_OngoingVerification {
	params := []pegomock.Param{comment, vcsHost}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DetermineCommand", params)
	return &CommentParsing_DetermineCommand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type CommentParsing_DetermineCommand_OngoingVerification struct {
	mock              *MockCommentParsing
	methodInvocations []pegomock.MethodInvocation
}

func (c *CommentParsing_DetermineCommand_OngoingVerification) GetCapturedArguments() (string, vcs.Host) {
	comment, vcsHost := c.GetAllCapturedArguments()
	return comment[len(comment)-1], vcsHost[len(vcsHost)-1]
}

func (c *CommentParsing_DetermineCommand_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []vcs.Host) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]vcs.Host, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(vcs.Host)
		}
	}
	return
}
