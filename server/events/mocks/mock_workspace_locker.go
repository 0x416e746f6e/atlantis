// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/hootsuite/atlantis/server/events (interfaces: WorkspaceLocker)

package mocks

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
)

type MockWorkspaceLocker struct {
	fail func(message string, callerSkip ...int)
}

func NewMockWorkspaceLocker() *MockWorkspaceLocker {
	return &MockWorkspaceLocker{fail: pegomock.GlobalFailHandler}
}

func (mock *MockWorkspaceLocker) TryLock(repoFullName string, env string, pullNum int) bool {
	params := []pegomock.Param{repoFullName, env, pullNum}
	result := pegomock.GetGenericMockFrom(mock).Invoke("TryLock", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockWorkspaceLocker) Unlock(repoFullName string, env string, pullNum int) {
	params := []pegomock.Param{repoFullName, env, pullNum}
	pegomock.GetGenericMockFrom(mock).Invoke("Unlock", params, []reflect.Type{})
}

func (mock *MockWorkspaceLocker) VerifyWasCalledOnce() *VerifierWorkspaceLocker {
	return &VerifierWorkspaceLocker{mock, pegomock.Times(1), nil}
}

func (mock *MockWorkspaceLocker) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierWorkspaceLocker {
	return &VerifierWorkspaceLocker{mock, invocationCountMatcher, nil}
}

func (mock *MockWorkspaceLocker) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierWorkspaceLocker {
	return &VerifierWorkspaceLocker{mock, invocationCountMatcher, inOrderContext}
}

type VerifierWorkspaceLocker struct {
	mock                   *MockWorkspaceLocker
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierWorkspaceLocker) TryLock(repoFullName string, env string, pullNum int) *WorkspaceLocker_TryLock_OngoingVerification {
	params := []pegomock.Param{repoFullName, env, pullNum}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "TryLock", params)
	return &WorkspaceLocker_TryLock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type WorkspaceLocker_TryLock_OngoingVerification struct {
	mock              *MockWorkspaceLocker
	methodInvocations []pegomock.MethodInvocation
}

func (c *WorkspaceLocker_TryLock_OngoingVerification) GetCapturedArguments() (string, string, int) {
	repoFullName, env, pullNum := c.GetAllCapturedArguments()
	return repoFullName[len(repoFullName)-1], env[len(env)-1], pullNum[len(pullNum)-1]
}

func (c *WorkspaceLocker_TryLock_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []int) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]int, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(int)
		}
	}
	return
}

func (verifier *VerifierWorkspaceLocker) Unlock(repoFullName string, env string, pullNum int) *WorkspaceLocker_Unlock_OngoingVerification {
	params := []pegomock.Param{repoFullName, env, pullNum}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Unlock", params)
	return &WorkspaceLocker_Unlock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type WorkspaceLocker_Unlock_OngoingVerification struct {
	mock              *MockWorkspaceLocker
	methodInvocations []pegomock.MethodInvocation
}

func (c *WorkspaceLocker_Unlock_OngoingVerification) GetCapturedArguments() (string, string, int) {
	repoFullName, env, pullNum := c.GetAllCapturedArguments()
	return repoFullName[len(repoFullName)-1], env[len(env)-1], pullNum[len(pullNum)-1]
}

func (c *WorkspaceLocker_Unlock_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []int) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]int, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(int)
		}
	}
	return
}
