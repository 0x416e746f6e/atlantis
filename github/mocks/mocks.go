// Code generated by MockGen. DO NOT EDIT.
// Source: github/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	models "github.com/hootsuite/atlantis/models"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetModifiedFiles mocks base method
func (m *MockClient) GetModifiedFiles(repo models.Repo, pull models.PullRequest) ([]string, error) {
	ret := m.ctrl.Call(m, "GetModifiedFiles", repo, pull)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModifiedFiles indicates an expected call of GetModifiedFiles
func (mr *MockClientMockRecorder) GetModifiedFiles(repo, pull interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedFiles", reflect.TypeOf((*MockClient)(nil).GetModifiedFiles), repo, pull)
}

// CreateComment mocks base method
func (m *MockClient) CreateComment(repo models.Repo, pull models.PullRequest, comment string) error {
	ret := m.ctrl.Call(m, "CreateComment", repo, pull, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockClientMockRecorder) CreateComment(repo, pull, comment interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), repo, pull, comment)
}

// PullIsApproved mocks base method
func (m *MockClient) PullIsApproved(repo models.Repo, pull models.PullRequest) (bool, error) {
	ret := m.ctrl.Call(m, "PullIsApproved", repo, pull)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsApproved indicates an expected call of PullIsApproved
func (mr *MockClientMockRecorder) PullIsApproved(repo, pull interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsApproved", reflect.TypeOf((*MockClient)(nil).PullIsApproved), repo, pull)
}

// GetPullRequest mocks base method
func (m *MockClient) GetPullRequest(repo models.Repo, num int) (*github.PullRequest, *github.Response, error) {
	ret := m.ctrl.Call(m, "GetPullRequest", repo, num)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPullRequest indicates an expected call of GetPullRequest
func (mr *MockClientMockRecorder) GetPullRequest(repo, num interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockClient)(nil).GetPullRequest), repo, num)
}

// UpdateStatus mocks base method
func (m *MockClient) UpdateStatus(repo models.Repo, pull models.PullRequest, state, description, context string) error {
	ret := m.ctrl.Call(m, "UpdateStatus", repo, pull, state, description, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockClientMockRecorder) UpdateStatus(repo, pull, state, description, context interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClient)(nil).UpdateStatus), repo, pull, state, description, context)
}
